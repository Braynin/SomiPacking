---
const { servicio } = Astro.props;


import ServiciosOptions from "../assets/ServiciosOptions.js";
import ModalImage from "./ModalImage.astro";

const servicioData = ServiciosOptions.find((s) => s.href === servicio);

---

<main class=" w-full bg-white">
  {servicioData ? (
    <>
      <video src={servicioData.video} loop autoplay muted class="w-full min-h-screen"></video>


      <section class="w-full py-10 flex flex-col items-center ">
        <h2 class="text-5xl font-bold mb-10 text-center">Nuestros Servicios</h2>
          <div class="flex w-2/3 justify-between">
            {servicioData.products.map((product) => (
              <div class="flip-card w-64 h-64 cursor-pointer">
                <div class="relative w-full h-full transition-transform duration-500 transform-style-3d">
                  <!-- Frente (Imagen y Título) -->
                 <div class="flip-front absolute inset-0 flex flex-col items-center justify-center">
                    <img src={product.icon} alt={`icon-${product.title}`} class="w-16 h-16" />
                    <p class="mt-2 text-lg font-semibold ">{product.title}</p>
                  </div> 

                  <!-- Reverso (Descripción) -->
                  <div class="flip-back absolute inset-0 flex items-center justify-center">
                    <p class="text-black text-center p-4">{product.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        
      </section>
      <section class="w-full py-10 flex flex-col items-center border-t-4 border-verdeClaro bg-white">
        <h2 class="text-5xl font-bold mb-10 text-center ">Productos</h2>
         <div class="w-full flex flex-col items-center justify-center">
           {servicioData.products.map((product) => (
            <h3 id={product.title.replace(/\s+/g, "-")} class="text-4xl font-bold my-20 text-center uppercase border-b-4 border-verdeClaro">{product.title}</h3>
            <div class="w-2/3 flex flex-wrap gap-10 justify-center">
              {product.variants.map((variant) => (
                <div class="product-card w-64 h-80 cursor-pointer relative overflow-hidden ">
                <!-- Imagen y Título -->
                <div class="absolute inset-0 flex flex-col items-center justify-center">
                  <img src={variant.image} alt={`imagen-${product.title}`} class="w-full h-auto object-contain" />
                  <p class="mt-2 text-lg font-semibold text-black">{variant.title}</p>
                </div>

                <!-- Características -->
                {variant.caracteristicas && variant.caracteristicas.length > 0 && (<>
                <div class="description-container absolute inset-0 flex flex-col justify-center items-center bg-verdeClaro border-4 border-black rounded-lg px-8 transform translate-y-full transition-transform duration-500">
                  <ol class="list-disc list-outside">
                    {variant.caracteristicas.map((caracteristica) => {
                      if (typeof caracteristica === "string") {
                        return (
                          <li class="mb-2 last-of-type:mb-0">
                            {caracteristica}
                          </li>
                        );
                      }
                      if (caracteristica.type === "image") {
                        return (
                          <li class="list-none">
                            <ModalImage src={caracteristica.src} alt="tabla de medidas" className="max-w-full" />
                          </li>
                        );
                      }
                      return null;
                    })}
                  </ol>
                </div>
  </>
)}

              </div>
              ))}
            </div>
           ))}
         </div> 
    
      </section>
    </>
    
  ) : (
    <h1>Servicio no encontrado</h1>
  )}
</main>

<script is:inline>
  //Animacion de los servicios
  function toggleFlip(event) {
    const card = event.currentTarget.querySelector(".relative");
    card.classList.toggle("flipped");
  }

  // Añadir event listeners
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".flip-card").forEach((card) => {
      card.addEventListener("click", toggleFlip);
    });
  });

//Animación de los Productos

  function toggleDescription(event) {
    const description = event.currentTarget.querySelector(".description-container");
    description.classList.toggle("translate-y-0");
    description.classList.toggle("translate-y-full");    
  }

  // Añadir event listeners
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".product-card").forEach((card) => {
      card.addEventListener("click", toggleDescription);
    });
  });
</script>

<style>
  /* Agregar estilo para el flip 3D */
  .flip-card {
    perspective: 1000px;
  }

  .relative {
    transition: transform 0.5s;
    transform-style: preserve-3d;
  }

  /* Rotación de 180 grados cuando la clase 'flipped' está activa */
  .relative.flipped {
    transform: rotateY(180deg);
  }

  /* Estilo para el frente de la tarjeta */
  .flip-front{
    backface-visibility: hidden;
  }

  /* Estilo para el reverso de la tarjeta (descripción) */
  .flip-back {
    background-color: transparent; /* Sin fondo blanco */
    color: #333; /* Color del texto de la descripción */
    text-align: center;
    padding: 10px;
    transform: rotateY(180deg); /* Inicialmente rotado para estar oculto */
    backface-visibility: hidden; /* Ocultar el reverso hasta que la tarjeta gire */
  }
</style>
